version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI 
    steps:
      - run:
          name: Install AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: ${CIRCLECI_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<<parameters.workflow_id>>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: ${CIRCLECI_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/XhJuq3JgBigK6a6BPqRg9F/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Unit test
          command: |
            cd frontend
            npm install
            npm test
  test-backend:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend Unit test
          command: |
            cd backend
            npm install
            npm test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Dependencies
          command: |
             yum install -y tar gzip
      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "dd:5e:cf:0f:1b:48:64:ff:f2:a1:0e:27:5a:fd:38:12"
      - attach_workspace:
          at: ~/
      - install_ansible    
      - install_awscli
      - run:
          name: Configure server
          command: |
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths: [project/backend]
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl --insecure https://kvdb.io/XhJuq3JgBigK6a6BPqRg9F/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations  

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "dd:5e:cf:0f:1b:48:64:ff:f2:a1:0e:27:5a:fd:38:12"
      - attach_workspace:
          at: ~/

      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text 
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations    
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "dd:5e:cf:0f:1b:48:64:ff:f2:a1:0e:27:5a:fd:38:12"
      - attach_workspace:
          at: ~/
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations


#   smoke-test:
#     docker:
    #   - image: cimg/base:stable
    # steps:
    #   - checkout
     
    #   - install_nodejs
    #   - install_awscli
    #   - run:
    #       name: Backend smoke test.
    #       command: |
    #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
    #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
    #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
    #             --output text)
    #           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
    #           echo ${BACKEND_PUBLIC_IP}
    #           echo backend-${CIRCLE_WORKFLOW_ID:0:7}
    #           echo ${API_URL}
    #           if curl -s $API_URL/api/status | grep "ok"
    #           then
    #             exit 0
    #           else
    #             exit 1
    #           fi
    #   - run:
    #       name: Frontend smoke test.
    #       command: |
    #           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
    #           echo $FRONTEND_WEBSITE
    #           if curl -s $FRONTEND_WEBSITE | grep "Welcome"
    #           then
    #             exit 0
    #           else
    #             exit 1
    #           fi
    #   - destroy-environment
    #   - revert-migrations 

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dep / Save Old Workflow ID to kvdb.io
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
  #           curl https://kvdb.io/XhJuq3JgBigK6a6BPqRg9F/old_workflow_id -d "${OLD_WORKFLOW_ID}"
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --stack-name InitialStack
  #     - destroy-environment
  #     - revert-migrations
 

  # cleanup:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export STACKS=($(aws cloudformation list-stacks \
  #               --query "StackSummaries[*].StackName" \
  #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"
  #           export OldWorkflowID=$(curl --insecure https://kvdb.io/XhJuq3JgBigK6a6BPqRg9F/old_workflow_id)
  #           echo Old Workflow ID: $OldWorkflowID
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           export OldWorkflowID=$(curl --insecure https://kvdb.io/XhJuq3JgBigK6a6BPqRg9F/old_workflow_id)
  #           echo Old Workflow ID: $OldWorkflowID 
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]